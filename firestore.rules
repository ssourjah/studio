
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuth() {
      return request.auth != null;
    }

    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function getRole(roleId) {
      return get(/databases/$(database)/documents/roles/$(roleId)).data;
    }

    function hasPermission(serviceID, permission) {
      // Check if the user is authenticated and has a roleId.
      if (!isAuth() || !('roleId' in getUserData())) {
        return false;
      }
      
      // Get the user's role data from the 'roles' collection.
      // The hasPermission function now correctly checks the user's role for specific permissions.
      return getRole(getUserData().roleId).permissions[serviceID][permission] == true;
    }

    // Public read for company settings
    match /settings/company {
      allow read: if true;
      allow write: if isAuth() && hasPermission('settings', 'edit');
    }

    match /users/{userId} {
      allow read: if isAuth() && (request.auth.uid == userId || hasPermission('userManagement', 'read'));
      allow create: if isAuth() && hasPermission('userManagement', 'create');
      allow update: if isAuth() && (request.auth.uid == userId || hasPermission('userManagement', 'edit'));
      allow delete: if isAuth() && hasPermission('userManagement', 'delete');
    }

    match /tasks/{taskId} {
      allow read: if isAuth() && (hasPermission('tasks', 'read') || hasPermission('taskManagement', 'read'));
      allow create: if isAuth() && hasPermission('tasks', 'create');
      allow update: if isAuth() && hasPermission('taskManagement', 'edit');
      allow delete: if isAuth() && hasPermission('taskManagement', 'delete');
    }

    match /roles/{roleId} {
      allow read: if isAuth() && hasPermission('administrator', 'read');
      allow create: if isAuth() && hasPermission('administrator', 'create');
      allow update: if isAuth() && hasPermission('administrator', 'edit');
      allow delete: if isAuth() && hasPermission('administrator', 'delete');
    }
  }
}
