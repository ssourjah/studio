rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAuth() {
      return request.auth != null;
    }
    
    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roleId;
    }
    
    function hasPermission(serviceID, permissionLevel) {
        let roleId = getUserRole();
        let rolePermissions = get(/databases/$(database)/documents/roles/$(roleId)).data.permissions;
        // The serviceID key is checked for existence before its nested permissionLevel is accessed.
        return serviceID in rolePermissions && permissionLevel in rolePermissions[serviceID] && rolePermissions[serviceID][permissionLevel] == true;
    }

    match /settings/company {
      allow read: if true;
      allow write: if isAuth() && hasPermission('settings', 'edit');
    }
    
    match /tasks/{taskId} {
      allow read: if isAuth() && (hasPermission('tasks', 'read') || hasPermission('taskManagement', 'read'));
      allow create: if isAuth() && hasPermission('tasks', 'create');
      allow update: if isAuth() && hasPermission('taskManagement', 'edit');
      allow delete: if isAuth() && hasPermission('taskManagement', 'delete');
    }

    match /users/{userId} {
      allow read: if isAuth() && (request.auth.uid == userId || hasPermission('userManagement', 'read'));
      allow create: if isAuth() && hasPermission('userManagement', 'create');
      allow update: if isAuth() && hasPermission('userManagement', 'edit');
      allow delete: if isAuth() && hasPermission('userManagement', 'delete');
    }

    match /roles/{roleId} {
      allow read: if isAuth() && hasPermission('administrator', 'read');
      allow write: if isAuth() && (hasPermission('administrator', 'create') || hasPermission('administrator', 'edit'));
      allow delete: if isAuth() && hasPermission('administrator', 'delete');
    }
  }
}
