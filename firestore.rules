rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAuth() {
      return request.auth != null;
    }

    function getUserData() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function hasPermission(serviceID, permission) {
      let userRoleId = getUserData().roleId;
      let rolePermissions = get(/databases/$(database)/documents/roles/$(userRoleId)).data.permissions;
      
      // Correct way to check nested map properties in rules
      return serviceID in rolePermissions && permission in rolePermissions[serviceID] && rolePermissions[serviceID][permission] == true;
    }
    
    // Public read access for company settings for login page
    match /settings/company {
      allow read: if true;
      allow write: if isAuth() && hasPermission('settings', 'edit');
    }

    match /users/{userId} {
      // Users can always read their own data. 
      // Users with userManagement 'read' can read any user's data.
      allow read: if isAuth() && (request.auth.uid == userId || hasPermission('userManagement', 'read'));
      // Allow user creation for public registration
      allow create: if true;
      allow update: if isAuth() && (request.auth.uid == userId || hasPermission('userManagement', 'edit'));
      allow delete: if isAuth() && hasPermission('userManagement', 'delete');
    }

    match /tasks/{taskId} {
      allow read: if isAuth() && (hasPermission('tasks', 'read') || hasPermission('taskManagement', 'read'));
      allow create: if isAuth() && hasPermission('tasks', 'create');
      allow update: if isAuth() && hasPermission('taskManagement', 'edit');
      allow delete: if isAuth() && hasPermission('taskManagement', 'delete');
    }
    
    match /roles/{roleId} {
        allow read: if isAuth() && hasPermission('administrator', 'read');
        allow create: if isAuth() && (hasPermission('administrator', 'create') || hasPermission('administrator', 'edit'));
        allow update: if isAuth() && hasPermission('administrator', 'edit');
        allow delete: if isAuth() && hasPermission('administrator', 'delete');
    }
  }
}
