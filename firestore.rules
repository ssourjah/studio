rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper Functions
    function isAuth() {
      return request.auth != null;
    }

    function getUserData() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function getRoleData(roleId) {
        return get(/databases/$(database)/documents/roles/$(roleId)).data;
    }
    
    function hasPermission(serviceID, permissionLevel) {
      // This function returns true if the authenticated user has the specified permission, false otherwise.
      // It checks for the existence of roleId, the role document, the permissions map, and the specific permission.
      let userData = getUserData();
      return 'roleId' in userData &&
             exists(/databases/$(database)/documents/roles/$(userData.roleId)) &&
             'permissions' in getRoleData(userData.roleId) &&
             getRoleData(userData.roleId).permissions.get(serviceID, {}).get(permissionLevel, false) == true;
    }
    
    // Rules
    match /users/{userId} {
      allow read: if isAuth() && (request.auth.uid == userId || hasPermission('userManagement', 'read'));
      allow create: if isAuth() && hasPermission('userManagement', 'create');
      allow update: if isAuth() && (request.auth.uid == userId || hasPermission('userManagement', 'edit'));
      allow delete: if isAuth() && hasPermission('userManagement', 'delete');
    }

    match /tasks/{taskId} {
      allow read: if isAuth() && (hasPermission('tasks', 'read') || hasPermission('taskManagement', 'read'));
      allow create: if isAuth() && hasPermission('tasks', 'create');
      allow update: if isAuth() && hasPermission('taskManagement', 'edit');
      allow delete: if isAuth() && hasPermission('taskManagement', 'delete');
    }

    match /roles/{roleId} {
      allow read: if isAuth() && hasPermission('administrator', 'read');
      allow create: if isAuth() && hasPermission('administrator', 'create');
      allow update: if isAuth() && hasPermission('administrator', 'edit');
      allow delete: if isAuth() && hasPermission('administrator', 'delete');
    }

    match /settings/company {
      allow read: if true;
      allow write: if isAuth() && hasPermission('settings', 'edit');
    }
  }
}
